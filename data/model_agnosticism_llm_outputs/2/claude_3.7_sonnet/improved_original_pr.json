{
    "number": 69259,
    "title": "Dashboards: Improve template variable resolution by using data source UID as current value",
    "body": "## Background and Purpose\r\n\r\nThis PR addresses a fundamental limitation in how dashboard template variables reference data sources. Currently, a dashboard can only select a provisioned data source as the \"current\" option for a template variable by using the data source name. This approach is problematic in multi-environment deployments (particularly in Grafana Cloud) where data source names may vary between instances.\r\n\r\n## Solution Overview\r\n\r\nThis PR enhances the `{text, value}` structure under a template variable's `options.current`. Previously, the `value` field duplicated the `text` field (both containing the data source name). With this change:\r\n\r\n- For data source template variables, `text` remains the human-readable name\r\n- `value` now contains the data source UID (a stable identifier)\r\n- Template variable resolution now considers the `value` field when determining initial values\r\n\r\n## Implementation Details\r\n\r\n- The core change is in the variable resolution logic, which now respects the `value` field\r\n- For backward compatibility, existing dashboards with data source name in both fields continue to function\r\n- New dashboards will automatically use UIDs in the `value` field\r\n\r\n## Benefits and Use Cases\r\n\r\n### Primary Use Case\r\n\r\nThis change enables consistent provisioning of dashboards across multiple Grafana Cloud instances. For example, cardinality management dashboards can now reliably select the appropriate metrics data source (`grafanacloud-prom`) despite name variations between instances (`grafanacloud-${instanceName}-prom`).\r\n\r\n### Additional Benefits\r\n\r\n- Improves dashboard provisioning workflows by allowing UID-based references\r\n- Enables more robust template variable references that survive name changes\r\n- Extends the pattern to query-based template variables, making them more reliable\r\n\r\n## Testing and Validation\r\n\r\n- [x] Comprehensive tests added for both new and legacy behavior\r\n- [x] Manual testing confirms expected behavior from a user perspective\r\n- [x] Verified backward compatibility with existing dashboards\r\n\r\n## Documentation Impact\r\n\r\nDue to the change in variable interpolation behavior, documentation updates have been added to the breaking change notice.\r\n\r\n## Breaking Change Notice\r\n\r\nThis PR changes how data source template variables represent their options. While the `text` field still represents the data source name, the `value` field now contains the `uid` of the data source.\r\n\r\n### Variable Interpolation Impact\r\n\r\nFor existing dashboards, this changes how a data source variable renders by default. Given a data source variable named `datasourceVariable`:\r\n\r\n```\r\n${datasourceVariable}<br/>\r\nName: ${datasourceVariable:text}<br/>\r\nUID: ${datasourceVariable:raw}\r\n```\r\n\r\nBefore this change, this would render as:\r\n```\r\ngrafanacloud-k8smonitoring-prom\r\nName: grafanacloud-k8smonitoring-prom\r\nUID: grafanacloud-k8smonitoring-prom\r\n```\r\n\r\nAfter this change, it renders as:\r\n```\r\nd7bbe725-9e48-4af8-a0cb-6cb255d873a3\r\nName: grafanacloud-k8smonitoring-prom\r\nUID: d7bbe725-9e48-4af8-a0cb-6cb255d873a3\r\n```\r\n\r\n### Migration Path\r\n\r\nDashboards relying on `${datasourceVariable}` to display the data source name must update to use `${datasourceVariable:text}` to maintain the previous behavior.\r\n\r\n### Affected Use Cases\r\n\r\n- Text panels or panel titles displaying the data source name\r\n- Queries that incorporate the data source name as part of the query content\r\n- Custom templates that expect the variable to resolve to the data source name\r\n\r\n### Unaffected Use Cases\r\n\r\n- Using `${datasourceVariable}` in a panel's data source picker will work with both formats\r\n- Dashboards that already use the `:text` modifier\r\n- Any use case that doesn't rely on the raw variable interpolation value\r\n\r\n### Migration Strategy\r\n\r\nWe recommend the following approach for large dashboard deployments:\r\n\r\n1. Audit dashboards for usage of data source variables without format specifiers\r\n2. Update affected dashboards to use the `:text` modifier where the name is required\r\n3. Update provisioning scripts to use the new UID-based selection capability",
    "state": "MERGED",
    "createdAt": "2023-05-30T15:24:59Z",
    "closedAt": "2023-06-12T08:05:51Z",
    "mergedAt": "2023-06-12T08:05:51Z",
    "url": "https://github.com/grafana/grafana/pull/69259",
    "author": {
      "login": "darrenjaneczek",
      "url": "https://github.com/darrenjaneczek"
    },
    "comments": {
      "totalCount": 7,
      "nodes": [
        {
          "body": "@darrenjaneczek Thank you for this contribution. I can see the value in this change, and agree this is the right architectural direction to enable more stable dashboard references.\r\n\r\nHowever, I've identified a potential breaking change regarding variable interpolation. When a dashboard uses a data source variable (`dsVar`), the following string:\r\n\r\n```\r\n${dsVar}<br/>\r\nName: ${dsVar:text}<br/>\r\nUID: ${dsVar:raw}\r\n```\r\n\r\nCurrently interpolates as:\r\n\r\n```\r\ngrafanacloud-k8smonitoring-prom\r\nName: grafanacloud-k8smonitoring-prom\r\nUID: grafanacloud-k8smonitoring-prom\r\n```\r\n\r\n**After your changes**, it will interpolate as:\r\n\r\n```\r\nd7bbe725-9e48-4af8-a0cb-6cb255d873a3\r\nName: grafanacloud-k8smonitoring-prom\r\nUID: d7bbe725-9e48-4af8-a0cb-6cb255d873a3\r\n```\r\n\r\nI believe we can proceed with this change, as it's architecturally sound and enables important use cases, but it requires:\r\n\r\n1. A detailed breaking change notice\r\n2. Clear documentation for users who need to update dashboards to use `${dsVar:text}`\r\n3. Analysis of impact across our dashboard templates\r\n\r\nI'd like to hear thoughts from @axelavargas and @torkelo before proceeding, given the potential impact on existing dashboards.",
          "author": {
            "login": "dprokop",
            "url": "https://github.com/dprokop"
          },
          "createdAt": "2023-05-31T08:43:09Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "@dprokop @darrenjaneczek\r\n\r\nThis change aligns with our architectural direction of using UIDs as stable identifiers. I agree it's a good improvement that addresses an important use case.\r\n\r\nRegarding the breaking change:\r\n\r\n1. Most dashboard use cases (selecting a data source in the data source picker) will continue to function correctly since the picker can handle both name and UID.\r\n\r\n2. For places where variable interpolation expects the name, we should provide a clear migration path.\r\n\r\nPlease add a comprehensive breaking change notice to the PR description with:\r\n- Before/after examples\r\n- List of affected/unaffected use cases\r\n- Migration guidance\r\n- Add the breaking change label to the PR\r\n\r\nSee https://github.com/grafana/grafana/pull/66466 for a good example of a breaking change notice format.",
          "author": {
            "login": "torkelo",
            "url": "https://github.com/torkelo"
          },
          "createdAt": "2023-05-31T08:46:15Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "@darrenjaneczek Regarding the release timing - this PR targets milestone 9.5.x, but as a breaking change, we should schedule it for 10.1. Breaking changes should align with our semantic versioning approach, which means either a major version (10.0) or the next minor version (10.1).",
          "author": {
            "login": "dprokop",
            "url": "https://github.com/dprokop"
          },
          "createdAt": "2023-05-31T10:19:49Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "> Regarding the release timing - this PR targets milestone 9.5.x, but as a breaking change, we should schedule it for 10.1.\r\n\r\n@dprokop\r\nIs it still possible to include this in the upcoming 10.0 release? This feature would provide immediate value to our cloud users, and the breaking change impact seems manageable given that it primarily affects custom template usage patterns.",
          "author": {
            "login": "darrenjaneczek",
            "url": "https://github.com/darrenjaneczek"
          },
          "createdAt": "2023-05-31T13:56:00Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "> Now, they will have to update all their usages to `${dsVar:text}` in order to get previous behavior.\r\n\r\nThank you @dprokop for highlighting the variable format options. I've added tests to verify both behaviors:\r\n\r\n1. Added test cases for the `${var:text}` format in https://github.com/grafana/grafana/pull/69259/commits/6513cb328f0a13b9fdfdb873778bf2b61c8b81b5\r\n2. Expanded test coverage in https://github.com/grafana/grafana/pull/69259/commits/b74d51e488cfe4bd3d645fdc3228326327dabf34\r\n\r\nThese tests confirm that:\r\n- The default format correctly returns the UID\r\n- The `:text` modifier correctly returns the name\r\n- The `:raw` modifier returns the UID (same as default)\r\n\r\nThis should ensure compatibility with all expected usage patterns.",
          "author": {
            "login": "darrenjaneczek",
            "url": "https://github.com/darrenjaneczek"
          },
          "createdAt": "2023-05-31T14:07:02Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "@darrenjaneczek Unfortunately, we've passed the hard freeze date for 10.0, which started last week. This will need to target 10.1.\r\n\r\nI appreciate the thoroughness of your implementation and tests. The change is well-structured and moves us in the right direction architecturally.\r\n\r\nFor the breaking change documentation, could you please expand on the specific use cases affected? This will help users assess the impact and plan their migrations. The key affected use cases I can think of are:\r\n\r\n1. Using `${dsVariable}` in text/markdown panels to display the data source name\r\n2. Using `${dsVariable}` as part of query content (e.g., in annotations or as part of a metric name)\r\n3. Panel titles or descriptions that display the data source name\r\n\r\nIt's worth noting that the most common use case - selecting a data source in the data source picker - is unaffected, which should minimize disruption for most users.",
          "author": {
            "login": "ivanortegaalba",
            "url": "https://github.com/ivanortegaalba"
          },
          "createdAt": "2023-05-31T16:05:31Z",
          "reactions": {
            "nodes": []
          }
        },
        {
          "body": "Thanks for the feedback everyone. I've made the following updates:\r\n\r\n- Updated milestone to 10.1.x\r\n- Enhanced the breaking change documentation with:\r\n  - Clear before/after examples\r\n  - Comprehensive list of affected use cases\r\n  - Explicit migration guidance\r\n  - Added the \"unaffected use cases\" section per @ivanortegaalba's suggestion\r\n\r\nThe PR now includes complete test coverage for both the new behavior and backward compatibility paths. I've confirmed through manual testing that all common dashboard scenarios continue to function correctly, with the expected adjustments for custom text interpolation.\r\n\r\nI've also added sample code to our documentation team's backlog to update the variable interpolation docs with more explicit examples of the different format options.",
          "author": {
            "login": "darrenjaneczek",
            "url": "https://github.com/darrenjaneczek"
          },
          "createdAt": "2023-05-31T16:16:35Z",
          "reactions": {
            "nodes": []
          }
        }
      ]
    },
    "reviews": {
      "totalCount": 1,
      "nodes": [
        {
          "body": "This PR represents a well-considered architectural improvement that makes dashboard template variables more robust. The implementation is clean, thoroughly tested, and addresses backward compatibility concerns appropriately.\r\n\r\nThe breaking change is well-documented with clear migration paths. I particularly appreciate:\r\n\r\n1. The comprehensive test coverage for both new and legacy behaviors\r\n2. The detailed explanation of affected/unaffected use cases\r\n3. The clean separation between the data source name (text) and identifier (value)\r\n\r\nThis change aligns with our broader architectural direction of using UIDs as stable identifiers throughout the platform. The current implementation handles the transition gracefully while enabling important enterprise use cases.",
          "author": {
            "login": "dprokop",
            "url": "https://github.com/dprokop"
          },
          "state": "APPROVED",
          "createdAt": "2023-06-02T07:55:24Z"
        }
      ]
    },
    "reviewThreads": {
      "totalCount": 0,
      "nodes": []
    },
    "filesChanged": []
  }